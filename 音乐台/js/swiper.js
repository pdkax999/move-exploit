



(function (w) {

  function Swiper(selector,options) {

 
 let auto = options && options.auto !== undefined ? options.auto : true 
  
    
 let  loop = options && options.loop !== undefined ? options.loop : true
      
    // console.log(options,loop);
       
 let  paginations = options && options.paginations !== undefined ? options.paginations : true
    
 let   timer =  options && options.timer !== undefined ? options.timer : 2000 
    
    var container = null

    if(typeof selector === 'string'){

      var container = document.getElementById(selector)

    }else{

       container = selector
    }
    
              
  var  wrapper = container.querySelector('.swiper-wrapper')
  
   var length =container.querySelectorAll('.swiper-slide').length
  
   
    var index = 0
  
    let  timeX

   console.log(loop);
  
   if(loop){
  
    wrapper.innerHTML += wrapper.innerHTML
  
   }
  
  var len = container.querySelectorAll('.swiper-slide').length
 
  var pagination = container.querySelector('.swiper-pagination')
  
  let isFirst= true;
  let isHore= false;
  
  
  
  container.addEventListener('touchstart',function (e) {
  
    this.touchStartTime = Date.now()
  
    this.x = e.touches[0].clientX

    this.y = e.touches[0].clientY
  
    wrapper.style.transition = 'none'
    
    
    if(loop){
  
      if(index === 0){
  
        index = length
   
      container.switchSlide(index,false)
     }
   
     if(index=== len-1){
   
        index = length - 1
   
        container.switchSlide(index,false)
     }
  
    }
  
    this.left = transformCSS(wrapper,'translateX')
    
    clearInterval(timeX)
  
  })
  
  container.addEventListener('touchmove',function (e) {
  
    this._x = e.touches[0].clientX

    this._y = e.touches[0].clientY
  
    let newLeft = this.left + (this._x - this.x)
  
  
  
    let disX = Math.abs(this._x - this.x)
    let disY = Math.abs(this._y - this.y)
  
    if(isFirst){
  
      isFirst = false
  
      if(disX>disY){
  
        isHore = true
  
      }else{
  
         isHore =false
      }
  
  
    }
  
    if(isHore){
      e.preventDefault()
  
    }else{
  
       return
    }
  
    transformCSS(wrapper,'translateX',newLeft)
  })
  
  
  container.addEventListener('touchend',function(e){
  
     isFirst = true
  
      if(!isHore){
  
         return
      }
  
    this.touchEendTime = Date.now()
  
    this._x = e.changedTouches[0].clientX
  
    var dis =  Math.abs(this._x - this.x)
  
    if(dis>(container.offsetWidth/2)||this.touchEendTime - this.touchStartTime <=300){
  
     if(this._x<this.x){
  
        index++
      }
  
      if(this._x>this.x){
  
        index--
  
      }
  
    }
  
    if(0>index){
  
       index =0
    }
  
  
  
    if(index>len-1){
  
        index = len-1
    }
  
   container.switchSlide(index)
   
    auto&&container.autoOpera()
 
     if(options && options.callback && typeof options.callback.end === 'function'){
        
        
        options.callback.end()
     }

  })
  

  wrapper.addEventListener('transitionend',function(){
  
  if(index >=len-1){
  
    index = length - 1
  
    container.switchSlide(index,false)
  }
  
  
  })
  
  
  container.autoOpera= function () {
  
    clearInterval(timeX)
  
    timeX = setInterval(() => {
  
      index++
  
      container.switchSlide(index)
  
     }, timer);

  }
  
   container.init=function(){
  
           let slide = container.querySelectorAll('.swiper-wrapper .swiper-slide')
   
            container.style.position = 'relative'

            container.style.width = '100%'

            container.style.overflow = 'hidden'

           
          
           window.addEventListener('load',function () {
  
            let h = slide[0].offsetHeight
          
            
            container.style.height = h + 'px'
           
           

          })
               
           
           
           
           wrapper.style.width = len  * 100 + '%'
          
           slide.forEach(function (params) {
             
               params.style.width =  100 / len + '%';

              
           })
           
         
          
           if(paginations){
            for(var i=0; i< length;i++){
  
              var span = document.createElement('span');
    
              if(i==0){
    
                span.className = 'active'
              }
    
              pagination.appendChild(span)
    
             }
           }
  
           dots = container.querySelectorAll('.swiper-pagination span')
  
   }
  
  
  container.switchSlide = function (i,isTransition) {
  
         if(isTransition === undefined){
  
             isTransition = true
         }
  
         if(isTransition){
  
          wrapper.style.transition = 'all 0.5s'
  
         }else{
          wrapper.style.transition = 'none'
         }
  
          let value = -i * container.offsetWidth
  
          // wrapper.style.left = value +'px'
  
          transformCSS(wrapper,'translateX',value)
         
           
          if(paginations){
  
            dots.forEach(element => {
  
              element.classList.remove('active')
      
            });
      
            dots[i%length].classList.add('active')
      
          }
          index = i
  
      }
  
  
  
      container.init()
      auto&&container.autoOpera()
 
      this.node = container

      this.getindex = function () {
        
         return index
      }
  }

  w.Swiper = Swiper
  


})(window)




